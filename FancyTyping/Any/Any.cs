//This code was generated by .\AnyGenerate.py
using System;
using System.Collections.Immutable;
namespace JesseRussell.FancyTyping
{
    /// <summary>
    /// Can store any value of a type found in the type arguments.
    /// </summary>
    public struct Any<T1> : IAny
    {
        public object Value { get; }
        public Type Type => Value.GetType();
        private static ImmutableHashSet<Type> _whiteList = null;
        public static ImmutableHashSet<Type> StaticWhiteList => _whiteList ??= new TypeArray<T1>().ToImmutableHashSet();
        public ImmutableHashSet<Type> WhiteList => StaticWhiteList;
        public Any(T1 value) => Value = value;
        public static implicit operator Any<T1>(T1 value) => new Any<T1>(value);
        public static explicit operator T1(Any<T1> self) => self.Value is T1 t ? t : throw new InvalidCastException();
        public override string ToString() => Value?.ToString();
        public override int GetHashCode() => Value?.GetHashCode() ?? HashCode.Combine((object)null);
        public override bool Equals(object obj) => Value?.Equals(obj) ?? obj?.Equals(Value) ?? true;
    }
    /// <summary>
    /// Can store any value of a type found in the type arguments.
    /// </summary>
    public struct Any<T1, T2> : IAny
    {
        public object Value { get; }
        public Type Type => Value.GetType();
        private static ImmutableHashSet<Type> _whiteList = null;
        public static ImmutableHashSet<Type> StaticWhiteList => _whiteList ??= new TypeArray<T1, T2>().ToImmutableHashSet();
        public ImmutableHashSet<Type> WhiteList => StaticWhiteList;
        public Any(T1 value) => Value = value;
        public Any(T2 value) => Value = value;
        public static implicit operator Any<T1, T2>(T1 value) => new Any<T1, T2>(value);
        public static implicit operator Any<T1, T2>(T2 value) => new Any<T1, T2>(value);
        public static explicit operator T1(Any<T1, T2> self) => self.Value is T1 t ? t : throw new InvalidCastException();
        public static explicit operator T2(Any<T1, T2> self) => self.Value is T2 t ? t : throw new InvalidCastException();
        public override string ToString() => Value?.ToString();
        public override int GetHashCode() => Value?.GetHashCode() ?? HashCode.Combine((object)null);
        public override bool Equals(object obj) => Value?.Equals(obj) ?? obj?.Equals(Value) ?? true;
    }
    /// <summary>
    /// Can store any value of a type found in the type arguments.
    /// </summary>
    public struct Any<T1, T2, T3> : IAny
    {
        public object Value { get; }
        public Type Type => Value.GetType();
        private static ImmutableHashSet<Type> _whiteList = null;
        public static ImmutableHashSet<Type> StaticWhiteList => _whiteList ??= new TypeArray<T1, T2, T3>().ToImmutableHashSet();
        public ImmutableHashSet<Type> WhiteList => StaticWhiteList;
        public Any(T1 value) => Value = value;
        public Any(T2 value) => Value = value;
        public Any(T3 value) => Value = value;
        public static implicit operator Any<T1, T2, T3>(T1 value) => new Any<T1, T2, T3>(value);
        public static implicit operator Any<T1, T2, T3>(T2 value) => new Any<T1, T2, T3>(value);
        public static implicit operator Any<T1, T2, T3>(T3 value) => new Any<T1, T2, T3>(value);
        public static explicit operator T1(Any<T1, T2, T3> self) => self.Value is T1 t ? t : throw new InvalidCastException();
        public static explicit operator T2(Any<T1, T2, T3> self) => self.Value is T2 t ? t : throw new InvalidCastException();
        public static explicit operator T3(Any<T1, T2, T3> self) => self.Value is T3 t ? t : throw new InvalidCastException();
        public override string ToString() => Value?.ToString();
        public override int GetHashCode() => Value?.GetHashCode() ?? HashCode.Combine((object)null);
        public override bool Equals(object obj) => Value?.Equals(obj) ?? obj?.Equals(Value) ?? true;
    }
    /// <summary>
    /// Can store any value of a type found in the type arguments.
    /// </summary>
    public struct Any<T1, T2, T3, T4> : IAny
    {
        public object Value { get; }
        public Type Type => Value.GetType();
        private static ImmutableHashSet<Type> _whiteList = null;
        public static ImmutableHashSet<Type> StaticWhiteList => _whiteList ??= new TypeArray<T1, T2, T3, T4>().ToImmutableHashSet();
        public ImmutableHashSet<Type> WhiteList => StaticWhiteList;
        public Any(T1 value) => Value = value;
        public Any(T2 value) => Value = value;
        public Any(T3 value) => Value = value;
        public Any(T4 value) => Value = value;
        public static implicit operator Any<T1, T2, T3, T4>(T1 value) => new Any<T1, T2, T3, T4>(value);
        public static implicit operator Any<T1, T2, T3, T4>(T2 value) => new Any<T1, T2, T3, T4>(value);
        public static implicit operator Any<T1, T2, T3, T4>(T3 value) => new Any<T1, T2, T3, T4>(value);
        public static implicit operator Any<T1, T2, T3, T4>(T4 value) => new Any<T1, T2, T3, T4>(value);
        public static explicit operator T1(Any<T1, T2, T3, T4> self) => self.Value is T1 t ? t : throw new InvalidCastException();
        public static explicit operator T2(Any<T1, T2, T3, T4> self) => self.Value is T2 t ? t : throw new InvalidCastException();
        public static explicit operator T3(Any<T1, T2, T3, T4> self) => self.Value is T3 t ? t : throw new InvalidCastException();
        public static explicit operator T4(Any<T1, T2, T3, T4> self) => self.Value is T4 t ? t : throw new InvalidCastException();
        public override string ToString() => Value?.ToString();
        public override int GetHashCode() => Value?.GetHashCode() ?? HashCode.Combine((object)null);
        public override bool Equals(object obj) => Value?.Equals(obj) ?? obj?.Equals(Value) ?? true;
    }
    /// <summary>
    /// Can store any value of a type found in the type arguments.
    /// </summary>
    public struct Any<T1, T2, T3, T4, T5> : IAny
    {
        public object Value { get; }
        public Type Type => Value.GetType();
        private static ImmutableHashSet<Type> _whiteList = null;
        public static ImmutableHashSet<Type> StaticWhiteList => _whiteList ??= new TypeArray<T1, T2, T3, T4, T5>().ToImmutableHashSet();
        public ImmutableHashSet<Type> WhiteList => StaticWhiteList;
        public Any(T1 value) => Value = value;
        public Any(T2 value) => Value = value;
        public Any(T3 value) => Value = value;
        public Any(T4 value) => Value = value;
        public Any(T5 value) => Value = value;
        public static implicit operator Any<T1, T2, T3, T4, T5>(T1 value) => new Any<T1, T2, T3, T4, T5>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5>(T2 value) => new Any<T1, T2, T3, T4, T5>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5>(T3 value) => new Any<T1, T2, T3, T4, T5>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5>(T4 value) => new Any<T1, T2, T3, T4, T5>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5>(T5 value) => new Any<T1, T2, T3, T4, T5>(value);
        public static explicit operator T1(Any<T1, T2, T3, T4, T5> self) => self.Value is T1 t ? t : throw new InvalidCastException();
        public static explicit operator T2(Any<T1, T2, T3, T4, T5> self) => self.Value is T2 t ? t : throw new InvalidCastException();
        public static explicit operator T3(Any<T1, T2, T3, T4, T5> self) => self.Value is T3 t ? t : throw new InvalidCastException();
        public static explicit operator T4(Any<T1, T2, T3, T4, T5> self) => self.Value is T4 t ? t : throw new InvalidCastException();
        public static explicit operator T5(Any<T1, T2, T3, T4, T5> self) => self.Value is T5 t ? t : throw new InvalidCastException();
        public override string ToString() => Value?.ToString();
        public override int GetHashCode() => Value?.GetHashCode() ?? HashCode.Combine((object)null);
        public override bool Equals(object obj) => Value?.Equals(obj) ?? obj?.Equals(Value) ?? true;
    }
    /// <summary>
    /// Can store any value of a type found in the type arguments.
    /// </summary>
    public struct Any<T1, T2, T3, T4, T5, T6> : IAny
    {
        public object Value { get; }
        public Type Type => Value.GetType();
        private static ImmutableHashSet<Type> _whiteList = null;
        public static ImmutableHashSet<Type> StaticWhiteList => _whiteList ??= new TypeArray<T1, T2, T3, T4, T5, T6>().ToImmutableHashSet();
        public ImmutableHashSet<Type> WhiteList => StaticWhiteList;
        public Any(T1 value) => Value = value;
        public Any(T2 value) => Value = value;
        public Any(T3 value) => Value = value;
        public Any(T4 value) => Value = value;
        public Any(T5 value) => Value = value;
        public Any(T6 value) => Value = value;
        public static implicit operator Any<T1, T2, T3, T4, T5, T6>(T1 value) => new Any<T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6>(T2 value) => new Any<T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6>(T3 value) => new Any<T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6>(T4 value) => new Any<T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6>(T5 value) => new Any<T1, T2, T3, T4, T5, T6>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6>(T6 value) => new Any<T1, T2, T3, T4, T5, T6>(value);
        public static explicit operator T1(Any<T1, T2, T3, T4, T5, T6> self) => self.Value is T1 t ? t : throw new InvalidCastException();
        public static explicit operator T2(Any<T1, T2, T3, T4, T5, T6> self) => self.Value is T2 t ? t : throw new InvalidCastException();
        public static explicit operator T3(Any<T1, T2, T3, T4, T5, T6> self) => self.Value is T3 t ? t : throw new InvalidCastException();
        public static explicit operator T4(Any<T1, T2, T3, T4, T5, T6> self) => self.Value is T4 t ? t : throw new InvalidCastException();
        public static explicit operator T5(Any<T1, T2, T3, T4, T5, T6> self) => self.Value is T5 t ? t : throw new InvalidCastException();
        public static explicit operator T6(Any<T1, T2, T3, T4, T5, T6> self) => self.Value is T6 t ? t : throw new InvalidCastException();
        public override string ToString() => Value?.ToString();
        public override int GetHashCode() => Value?.GetHashCode() ?? HashCode.Combine((object)null);
        public override bool Equals(object obj) => Value?.Equals(obj) ?? obj?.Equals(Value) ?? true;
    }
    /// <summary>
    /// Can store any value of a type found in the type arguments.
    /// </summary>
    public struct Any<T1, T2, T3, T4, T5, T6, T7> : IAny
    {
        public object Value { get; }
        public Type Type => Value.GetType();
        private static ImmutableHashSet<Type> _whiteList = null;
        public static ImmutableHashSet<Type> StaticWhiteList => _whiteList ??= new TypeArray<T1, T2, T3, T4, T5, T6, T7>().ToImmutableHashSet();
        public ImmutableHashSet<Type> WhiteList => StaticWhiteList;
        public Any(T1 value) => Value = value;
        public Any(T2 value) => Value = value;
        public Any(T3 value) => Value = value;
        public Any(T4 value) => Value = value;
        public Any(T5 value) => Value = value;
        public Any(T6 value) => Value = value;
        public Any(T7 value) => Value = value;
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7>(T1 value) => new Any<T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7>(T2 value) => new Any<T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7>(T3 value) => new Any<T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7>(T4 value) => new Any<T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7>(T5 value) => new Any<T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7>(T6 value) => new Any<T1, T2, T3, T4, T5, T6, T7>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7>(T7 value) => new Any<T1, T2, T3, T4, T5, T6, T7>(value);
        public static explicit operator T1(Any<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T1 t ? t : throw new InvalidCastException();
        public static explicit operator T2(Any<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T2 t ? t : throw new InvalidCastException();
        public static explicit operator T3(Any<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T3 t ? t : throw new InvalidCastException();
        public static explicit operator T4(Any<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T4 t ? t : throw new InvalidCastException();
        public static explicit operator T5(Any<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T5 t ? t : throw new InvalidCastException();
        public static explicit operator T6(Any<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T6 t ? t : throw new InvalidCastException();
        public static explicit operator T7(Any<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T7 t ? t : throw new InvalidCastException();
        public override string ToString() => Value?.ToString();
        public override int GetHashCode() => Value?.GetHashCode() ?? HashCode.Combine((object)null);
        public override bool Equals(object obj) => Value?.Equals(obj) ?? obj?.Equals(Value) ?? true;
    }
    /// <summary>
    /// Can store any value of a type found in the type arguments.
    /// </summary>
    public struct Any<T1, T2, T3, T4, T5, T6, T7, T8> : IAny
    {
        public object Value { get; }
        public Type Type => Value.GetType();
        private static ImmutableHashSet<Type> _whiteList = null;
        public static ImmutableHashSet<Type> StaticWhiteList => _whiteList ??= new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8>().ToImmutableHashSet();
        public ImmutableHashSet<Type> WhiteList => StaticWhiteList;
        public Any(T1 value) => Value = value;
        public Any(T2 value) => Value = value;
        public Any(T3 value) => Value = value;
        public Any(T4 value) => Value = value;
        public Any(T5 value) => Value = value;
        public Any(T6 value) => Value = value;
        public Any(T7 value) => Value = value;
        public Any(T8 value) => Value = value;
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value) => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8>(T2 value) => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8>(T3 value) => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8>(T4 value) => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8>(T5 value) => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8>(T6 value) => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8>(T7 value) => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8>(T8 value) => new Any<T1, T2, T3, T4, T5, T6, T7, T8>(value);
        public static explicit operator T1(Any<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T1 t ? t : throw new InvalidCastException();
        public static explicit operator T2(Any<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T2 t ? t : throw new InvalidCastException();
        public static explicit operator T3(Any<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T3 t ? t : throw new InvalidCastException();
        public static explicit operator T4(Any<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T4 t ? t : throw new InvalidCastException();
        public static explicit operator T5(Any<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T5 t ? t : throw new InvalidCastException();
        public static explicit operator T6(Any<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T6 t ? t : throw new InvalidCastException();
        public static explicit operator T7(Any<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T7 t ? t : throw new InvalidCastException();
        public static explicit operator T8(Any<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T8 t ? t : throw new InvalidCastException();
        public override string ToString() => Value?.ToString();
        public override int GetHashCode() => Value?.GetHashCode() ?? HashCode.Combine((object)null);
        public override bool Equals(object obj) => Value?.Equals(obj) ?? obj?.Equals(Value) ?? true;
    }
}